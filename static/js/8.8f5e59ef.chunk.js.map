{"version":3,"sources":["components/Button/Button.tsx","components/Button/Button.module.scss","components/FormControl/FormControl.tsx","components/FormControl/FormControl.module.scss","utils/validator.tsx","pages/Login/LoginPage.module.scss","pages/Login/LoginPage.tsx"],"names":["Button","className","children","onClick","white","restProps","classNames","s","button","module","exports","FormControl","meta","touched","error","hasError","styles","formControl","childrenWrapperStyle","fieldErrorWrapper","Textarea","props","input","Input","createField","placeholder","name","component","validators","text","validate","required","value","maxLengthCreator","maxLength","length","LoginForm","handleSubmit","captchaUrl","onSubmit","form","testData","inputWrapper","type","checkboxWrapper","src","alt","loginBtn","formSummaryError","LoginReduxForm","reduxForm","LoginPage","useSelector","state","authState","isAuth","dispatch","useDispatch","to","path","PROFILE","login","singIn","pageName","formData","email","password","rememberMe","captcha"],"mappings":"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","file":"static/js/8.8f5e59ef.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport classNames from 'classnames'\nimport s from './Button.module.scss'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype ButtonPropsType = DefaultButtonPropsType & {\n   white?: boolean\n}\n\nexport const Button: React.FC<ButtonPropsType> = ({className, children, onClick, white, ...restProps}) => {\n\n   return (\n       <button {...restProps}\n               className={classNames(s.button, className, {\n                  [s.white]: white,\n               })}\n               onClick={onClick}>{children}\n       </button>\n   )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1vyh7\"};","import React from 'react'\nimport s from './FormControl.module.scss'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\nimport {FieldValidatorType} from '../../utils/validator'\n\ntype FormControlPropsType = {\n   meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n\n   const hasError = touched && error\n\n   const styles = `${s.formControl}  ${hasError ? s.error : ''}`\n\n   return (\n       <div className={styles}>\n          <div className={s.childrenWrapperStyle}>\n             {children}\n          </div>\n          <div className={s.fieldErrorWrapper}>\n             {\n                hasError && <span>{error}</span>\n             }\n          </div>\n       </div>\n   )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n   const {input, meta, ...restProps} = props\n   return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n   const {input, meta, ...restProps} = props\n   return <FormControl {...props}>\n      <input {...input}{...restProps}/>\n   </FormControl>\n}\n\nexport const Checkbox: React.FC<WrappedFieldProps> = (props) => {\n   const {input, meta, ...restProps} = props\n   return <FormControl {...props}>\n      <input {...input}{...restProps}/>\n   </FormControl>\n}\n\n//create wrapper\nexport const createField = <FormKeysType extends string>(placeholder: string | null,\n                                                         name: FormKeysType,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         validators: Array<FieldValidatorType>,\n                                                         props = {},\n                                                         text = '') => (\n    <div>\n       <Field placeholder={placeholder}\n              name={name}\n              component={component}\n              validate={validators}\n\n              {...props}/>\n       {text}\n    </div>\n)\n\n//get all props keys for form without mistakes\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2bStf\",\"childrenWrapperStyle\":\"FormControl_childrenWrapperStyle__UnGoF\",\"error\":\"FormControl_error__3tDpO\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n\n    return 'Field id required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n\n    return undefined;\n}\n\nexport const minLengthCreator = (minLength: number): FieldValidatorType => (value) => {\n    if (value && value.length <= minLength) return `Min length is ${minLength} symbols`;\n\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"LoginPage_login__2zX1-\",\"singIn\":\"LoginPage_singIn__LdNnG\",\"pageName\":\"LoginPage_pageName__3bPHQ\",\"form\":\"LoginPage_form__sMl2A\",\"testData\":\"LoginPage_testData__1JlKa\",\"inputWrapper\":\"LoginPage_inputWrapper__1u0bk\",\"checkboxWrapper\":\"LoginPage_checkboxWrapper__1k_Sp\",\"loginBtn\":\"LoginPage_loginBtn__4vkfg\"};","import React from 'react'\nimport {createField, Input} from '../../components/FormControl/FormControl'\nimport {Redirect} from 'react-router-dom'\nimport {required} from '../../utils/validator'\nimport {login} from '../../redux/auth-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport s from './LoginPage.module.scss'\nimport {path} from '../../app/App';\nimport { Button } from '../../components/Button/Button'\nimport {AppStateType} from '../../app/store';\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType,\n    LoginFormOwnProps> & LoginFormOwnProps>\n    = ({\n           handleSubmit,\n           error,\n           captchaUrl\n       }) => {\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <div className={s.testData}>\n                <p>Use test data</p>\n                <p>Email: free@samuraijs.com</p>\n                <p>Password: free</p>\n            </div>\n\n            <div className={s.inputWrapper}>\n                {createField('Email', 'email', Input, [required])}\n            </div>\n            <div className={s.inputWrapper}>\n                {createField('Password', 'password', Input, [required], {type: 'password'})}\n            </div>\n            <div className={s.checkboxWrapper}>\n                {createField(null, 'rememberMe', Input, [], {type: 'checkbox'}, '')}\n                <span>Remember me</span>\n            </div>\n            <div>\n                {/*captchaUrl without '&&' check don't work! Because null*/}\n                {captchaUrl && <img src={captchaUrl && captchaUrl} alt=\"captcha\"/>}\n            </div>\n            <div>\n                {captchaUrl && createField('Symbol of captcha', 'captcha', Input, [required], {})}\n            </div>\n            <div>\n                <Button className={s.loginBtn}>Login</Button>\n            </div>\n            {error && <div className={s.formSummaryError}>{error}</div>}\n            <div>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\ntype LoginFormValuesType = {\n    captcha: string | null //this type name have to match with field name 'captcha'\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const LoginPage: React.FC = () => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.authState.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.authState.isAuth)\n    const dispatch = useDispatch()\n\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={path.PROFILE}/>\n    }\n\n    return (\n        <div className={s.login}>\n            <div className={s.singIn}>\n                <h1 className={s.pageName}>Login</h1>\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n            </div>\n        </div>\n\n    )\n}\n"],"sourceRoot":""}