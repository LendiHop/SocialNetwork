{"version":3,"sources":["components/Button/Button.tsx","components/Button/Button.module.scss","assets/images/users/bg-user.jpg","pages/Users/User/User.module.scss","components/Paginator/Paginator.module.scss","pages/Users/Users.module.scss","pages/Users/UsersSearchForm/UsersSearchForm.module.scss","pages/Users/UsersPageHeader/UsersPageHeader.module.scss","pages/Users/User/User.tsx","components/Paginator/Paginator.tsx","redux/users-selectors.ts","pages/Users/UsersSearchForm/UsersSearchForm.tsx","pages/Users/UsersPageHeader/UsersPageHeader.tsx","pages/Users/Users.tsx","pages/Users/UsersContainer.tsx"],"names":["Button","className","children","onClick","white","restProps","classNames","s","button","module","exports","User","user","follow","unfollow","followingInProgress","userLarge","backgroundImage","photos","large","testBg","userWrapper","userBox","background","style","followers","friendMeta","alt","src","noImg","userPhoto","friendName","to","id","linkToProfile","name","country","friendInfo","frndInfoItem","fieldName","followed","btn","disabled","some","Paginator","currentPage","onPageChanged","pageSize","totalItemsCount","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginationWrapper","pagBtn","prevBtn","filter","p","map","key","classnames","selected","numberItem","getUsers","state","usersState","users","getTotalUsersCount","totalUsersCount","getPageSize","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchValidateForm","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","formWrapper","usersForm","type","usersSearchInput","as","usersSelector","value","searchBtn","UsersPageHeader","centralMeta","leftBlock","pageTitle","followCount","rightBlock","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substring","actualPage","actualFilter","page","Number","requestUsersAction","query","pathname","path","DEVELOPERS","followUser","unfollowUser","usersPageWrapper","centralUsersMeta","row","u","UsersPage","Preloader"],"mappings":"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","file":"static/js/6.ff03d14b.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport classNames from 'classnames'\nimport s from './Button.module.scss'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype ButtonPropsType = DefaultButtonPropsType & {\n   white?: boolean\n}\n\nexport const Button: React.FC<ButtonPropsType> = ({className, children, onClick, white, ...restProps}) => {\n\n   return (\n       <button {...restProps}\n               className={classNames(s.button, className, {\n                  [s.white]: white,\n               })}\n               onClick={onClick}>{children}\n       </button>\n   )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1vyh7\"};","module.exports = __webpack_public_path__ + \"static/media/bg-user.4e482b6b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"User_userWrapper__3-QQe\",\"userBox\":\"User_userBox__l05QL\",\"background\":\"User_background__2t81A\",\"followers\":\"User_followers__2pdkB\",\"friendMeta\":\"User_friendMeta__34k9g\",\"userPhoto\":\"User_userPhoto__3issb\",\"friendName\":\"User_friendName__3yjEh\",\"country\":\"User_country__3_GC0\",\"friendInfo\":\"User_friendInfo__3hoGX\",\"frndInfoItem\":\"User_frndInfoItem__MMAVK\",\"fieldName\":\"User_fieldName__2q1j4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationWrapper\":\"Paginator_paginationWrapper__3pYG3\",\"numberItem\":\"Paginator_numberItem__2wqwP\",\"selected\":\"Paginator_selected__20ToQ\",\"pagBtn\":\"Paginator_pagBtn__363NO\",\"prevBtn\":\"Paginator_prevBtn__1_iZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPageWrapper\":\"Users_usersPageWrapper__3EYG7\",\"centralUsersMeta\":\"Users_centralUsersMeta__cnSFm\",\"row\":\"Users_row__3mocD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"UsersSearchForm_formWrapper__3PeVq\",\"usersForm\":\"UsersSearchForm_usersForm__3LngN\",\"usersSearchInput\":\"UsersSearchForm_usersSearchInput__1aNGF\",\"usersSelector\":\"UsersSearchForm_usersSelector__36awI\",\"searchBtn\":\"UsersSearchForm_searchBtn__3RnOj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"centralMeta\":\"UsersPageHeader_centralMeta__JGSvU\",\"leftBlock\":\"UsersPageHeader_leftBlock__1iInR\",\"pageTitle\":\"UsersPageHeader_pageTitle__2MPXX\",\"followCount\":\"UsersPageHeader_followCount__3uzM9\"};","import noImg from '../../../assets/images/users/no-image-100.png'\nimport testBg from '../../../assets/images/users/bg-user.jpg'\nimport React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport {UsersType} from '../../../redux/users-reducer'\nimport {Button} from '../../../components/Button/Button'\nimport s from './User.module.scss'\n\ntype UserType = {\n    user: UsersType\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const User: React.FC<UserType> = ({user, follow, unfollow, followingInProgress}) => {\n\n    const userLarge = {\n        backgroundImage: `url(${user.photos.large ? user.photos.large : testBg})`,\n    }\n\n    return (\n        <div className={s.userWrapper}>\n            <div className={s.userBox}>\n                <div className={s.background} style={userLarge}>\n                    <span className={s.followers}>\n                        Followers: 120\n                    </span>\n                </div>\n                <div className={s.friendMeta}>\n                    <img alt={'avatar'} src={user.photos.large != null\n                        ? user.photos.large\n                        : noImg}\n                         className={s.userPhoto}\n                    />\n                    <div className={s.friendName}>\n                        <NavLink to={'/profile/' + user.id} className={s.linkToProfile}>{user.name}</NavLink>\n                        <span className={s.country}>California, USA</span>\n                    </div>\n                    <ul className={s.friendInfo}>\n                        <li className={s.frndInfoItem}>\n                            <span className={s.fieldName}>User id:</span>\n                            {user.id}\n                        </li>\n                        <li className={s.frndInfoItem}>\n                            <span className={s.fieldName}>Followed:</span>\n                            {user.followed ? 'Yes' : 'No'}\n                        </li>\n                    </ul>\n                    {\n                        user.followed ? <Button\n                                className={s.btn}\n                                disabled={followingInProgress.some(id => id === user.id)}\n                                onClick={() => {\n                                    unfollow(user.id)\n                                }}>Unfollow</Button>\n                            : <Button\n                                className={s.btn}\n                                disabled={followingInProgress.some(id => id === user.id)}\n                                onClick={() => {\n                                    follow(user.id)\n                                }}>Follow</Button>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, {useState} from 'react'\nimport classnames from 'classnames'\nimport s from './Paginator.module.scss'\n\ntype PropsType = {\n    currentPage: number\n    onPageChanged: (p: number) => void\n    pageSize: number\n    totalItemsCount: number\n    portionSize?: number\n}\n\nexport const Paginator: React.FC<PropsType> = (\n    {currentPage, onPageChanged, pageSize, totalItemsCount, portionSize = 10}\n) => {\n\n    const pageCount = Math.ceil(totalItemsCount / pageSize)\n\n    const pages = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pageCount / portionSize)\n    const [portionNumber, setPortionNumber] = useState<number>(1)\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    const rightPortionPageNumber = portionNumber * portionSize + 1\n\n    const prevPortionNumberHandler = () => {\n        setPortionNumber(portionNumber - 1)\n    }\n\n    const nextPortionNumberHandler = () => setPortionNumber(portionNumber + 1)\n\n    return (\n        <div className={s.paginationWrapper}>\n            {portionNumber > 1\n            && <button onClick={prevPortionNumberHandler} className={`${s.pagBtn} ${s.prevBtn}  `}/>}\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p, i) => {\n                    return <span key={`number_items${i}`}\n                                 className={classnames({\n                                     [s.selected]: currentPage === p\n                                 }, s.numberItem)}\n                                 onClick={() => {\n                                     onPageChanged(p)\n                                 }}>{p}</span>\n                })}\n            {portionCount > portionNumber\n            && <button onClick={nextPortionNumberHandler} className={s.pagBtn}/>}\n        </div>\n    )\n}\n","import {UsersType} from './users-reducer'\nimport {AppStateType} from '../app/store';\n\nexport const getUsers = (state: AppStateType): Array<UsersType> => {\n    return state.usersState.users\n}\n\nexport const getTotalUsersCount = (state: AppStateType): number => {\n    return state.usersState.totalUsersCount\n}\n\nexport const getPageSize = (state: AppStateType): number => {\n    return state.usersState.pageSize\n}\n\nexport const getCurrentPage = (state: AppStateType): number => {\n    return state.usersState.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType): boolean => {\n    return state.usersState.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType): Array<number> => {\n    return state.usersState.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersState.filter\n}\n\n\n","import {Form, Formik, Field} from 'formik';\nimport React from 'react';\nimport {FilterType} from '../../../redux/users-reducer';\nimport {useSelector} from 'react-redux';\nimport {getUsersFilter} from '../../../redux/users-selectors';\n\nimport s from './UsersSearchForm.module.scss'\nimport {Button} from '../../../components/Button/Button';\n\nconst usersSearchValidateForm = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\ntype FriendFormType = 'true' | 'false' | 'null';\n\ntype FormType = {\n    term: string,\n    friend: FriendFormType\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n    const filter = useSelector(getUsersFilter)\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        //convert string to boolean\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n        //onFilterChanged get filter and include this value in requestUsers(1, pageSize, filter)\n        //requestUsers do request in redux\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <Formik\n        //initial values === redux filter values\n        //useEffect work after first render and current values take later, so\n        //the enableReinitialize prop resets form if initialValues is changed\n        enableReinitialize\n        initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n        validate={usersSearchValidateForm}\n        onSubmit={submit}>\n\n        {({isSubmitting}) => (\n            <div className={s.formWrapper}>\n                <Form className={s.usersForm}>\n                    <Field type=\"text\" name=\"term\" className={s.usersSearchInput}/>\n                    <Field name=\"friend\" as=\"select\" className={s.usersSelector}>\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only following</option>\n                        <option value=\"false\">Only unfollowing</option>\n                    </Field>\n                    <Button type=\"submit\" disabled={isSubmitting} className={s.searchBtn}>\n                        Find\n                    </Button>\n                </Form>\n            </div>\n        )}\n    </Formik>\n})\n","import {FilterType} from '../../../redux/users-reducer';\nimport React from 'react';\nimport {UsersSearchForm} from '../UsersSearchForm/UsersSearchForm';\n\nimport s from './UsersPageHeader.module.scss';\n\ntype UsersPageHeaderProps = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersPageHeader: React.FC<UsersPageHeaderProps> = ({ onFilterChanged}) => {\n    return (\n        <div className={s.centralMeta}>\n            <div className={s.leftBlock}>\n                <div className={s.pageTitle}>Friends / Followers\n                    <span className={s.followCount}>55</span>\n                </div>\n            </div>\n            <div className={s.rightBlock}>\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\n            </div>\n        </div>\n    )\n}\n","import React, {useEffect} from 'react'\nimport {User} from './User/User'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {FilterType, follow, unfollow} from '../../redux/users-reducer'\nimport {Paginator} from '../../components/Paginator/Paginator'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors';\nimport {useHistory} from 'react-router-dom';\nimport * as queryString from 'querystring';\n\nimport s from './Users.module.scss'\nimport {UsersPageHeader} from './UsersPageHeader/UsersPageHeader';\nimport {path} from '../../app/App';\nimport {requestUsersAction} from '../../redux/redux-sagas/users-sagas';\n\ntype QueryParamsType = { term?: string, page?: string, friend?: string };\n\nexport const Users: React.FC =\n    (props) => {\n        const followingInProgress = useSelector(getFollowingInProgress)\n        const totalUsersCount = useSelector(getTotalUsersCount)\n        const currentPage = useSelector(getCurrentPage)\n        const pageSize = useSelector(getPageSize)\n        const filter = useSelector(getUsersFilter)\n        const users = useSelector(getUsers)\n\n        const dispatch = useDispatch()\n        const history = useHistory()\n\n        //this effect get first url params and set it to redux\n        useEffect(() => {\n            //read url params from location and convert it to object using 'queryString'\n            //there is excess '?'. delete it use 'substring'\n            const parsed = queryString\n                .parse(history.location.search.substring(1)) as QueryParamsType\n\n            let actualPage = currentPage\n            let actualFilter = filter\n\n            //if has actual value in url we can assign it 'actualPage' and convert string pageNumber to number\n            //after that this value go to request\n            if (!!parsed.page) actualPage = Number(parsed.page)\n            //we can't change filter mutable\n            if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n            //check empty url\n            switch (parsed.friend) {\n                case 'null':\n                    actualFilter = {...actualFilter, friend: null}\n                    break\n                case 'true':\n                    actualFilter = {...actualFilter, friend: true}\n                    break\n                case 'false':\n                    actualFilter = {...actualFilter, friend: false}\n                    break\n            }\n\n            dispatch(requestUsersAction(actualPage, pageSize, actualFilter))\n        }, [])\n\n        // this effect get filter from redux after changing and push settings to url from search(term,friend)\n        // url setting has dependency = filter, currentPage\n        useEffect(() => {\n\n            const query: QueryParamsType = {}\n            //if term doesn't empty\n            if (!!filter.term) query.term = filter.term\n            //add friend if !== null - default value in API\n            if (filter.friend !== null) query.friend = String(filter.friend)\n            //add currentPage if !== 1 - default value in API\n            if (currentPage !== 1) query.page = String(currentPage)\n\n            history.push({\n                pathname: path.DEVELOPERS,\n                search: queryString.stringify(query)\n            })\n        }, [filter, currentPage])\n\n        const onPageChanged = (currentPage: number) => {\n            dispatch(requestUsersAction(currentPage, pageSize, filter))\n        }\n        const onFilterChanged = (filter: FilterType) => {\n            dispatch(requestUsersAction(1, pageSize, filter))\n        }\n        const followUser = (id: number) => {\n            dispatch(follow(id))\n        }\n        const unfollowUser = (id: number) => {\n            dispatch(unfollow(id))\n        }\n\n        return (\n            <div className={s.usersPageWrapper}>\n                <UsersPageHeader onFilterChanged={onFilterChanged}/>\n                <div>\n                    <Paginator currentPage={currentPage}\n                               onPageChanged={onPageChanged}\n                               pageSize={pageSize}\n                               totalItemsCount={totalUsersCount}\n                    />\n                    <div className={s.centralUsersMeta}>\n                        <div className={s.row}>\n                            {users.map(u => <User key={u.id}\n                                                  user={u}\n                                                  follow={followUser}\n                                                  unfollow={unfollowUser}\n                                                  followingInProgress={followingInProgress}/>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n","import React from 'react'\nimport {Users} from './Users'\nimport {useSelector} from 'react-redux'\nimport {getIsFetching} from '../../redux/users-selectors'\nimport {Preloader} from '../../components/Preloader/Preloader'\nimport {FilterType, UsersType} from '../../redux/users-reducer'\n\ntype UserPagePropsType = {\n    users: Array<UsersType>\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    followingInProgress: Array<number>\n    filter: FilterType\n}\n\nexport const UsersPage: React.FC<UserPagePropsType> = (props) => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return (\n        <>\n            {isFetching ? <Preloader/> : null}\n            <Users/>\n        </>\n    )\n}\n"],"sourceRoot":""}