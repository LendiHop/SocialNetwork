{"version":3,"sources":["components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","assets/images/user.png","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/preloader.svg","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["Preloader","style","backgroundColor","src","preloader","alt","required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","undefined","className","formSummaryError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","key","e","User","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","onUserFollow","bind","onUserUnfollow","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","color","fontSize","fontFamily","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","minHeight","padding","width","mode","height","title","Item","LaptopOutlined","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SocNetApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.f61be402.chunk.js","sourcesContent":["import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} alt=\"preloader\" />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2Vmgx\",\"pageNumber\":\"Paginator_pageNumber__ZS4Da\",\"selectedPage\":\"Paginator_selectedPage__3vh86\"};","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","import {PhotosType, ProfileType} from '../types/types';\r\nimport {instance, APIResponseType} from './api';\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from '../types/types';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'It\\'s my first post', likesCount: 12},\r\n        {id: 2, message: 'Hi, how are you?', likesCount: 11},\r\n        {id: 3, message: 'You can add new post using form above', likesCount: 11},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {InferActionsTypes} from './redux-store';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Andrew'},\r\n        {id: 2, name: 'Daniel'},\r\n        {id: 3, name: 'Larry'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Gloria'},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'What are you doing?'},\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.6e7c9db7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1NM9s\"};","import axios from \"axios\";\r\nimport {UserType} from '../types/types';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"988488bf-4d96-4e4c-8879-9dd6d2da04d6\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n","import {instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}\r\n","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\r\nimport {required} from '../../utils/validators/validators'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport style from './../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h3>You can log in using common test account credentials:</h3>\r\n        <h4>Email: free@samuraijs.com</h4>\r\n        <h4>Password: free</h4>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;\r\n","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;\r\n","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from './api';\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}\r\n","import {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from '../types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\nimport {APIResponseType} from '../api/api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React from \"react\"\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\r\n                                      currentPage = 1,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from 'react'\r\nimport styles from './users.module.css'\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\nexport default User\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n","import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, follow, requestUsers, unfollow} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const onUserFollow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const onUserUnfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={onUserUnfollow}\r\n                                     follow={onUserFollow}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport {Users} from './Users'\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}\r\n","import {AppStateType} from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Avatar, Button, Col, Layout, Row} from 'antd'\r\nimport {UserOutlined} from '@ant-design/icons'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\nimport {logout} from '../../redux/auth-reducer'\r\n\r\nexport type MapPropsType = {}\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}>\r\n                <span style={{color: 'white', fontSize: '25px', fontFamily: 'cursive'}}>SocialNetwork</span>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ?<> <Col span={1}>\r\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n    </Header>\r\n}\r\n","import React, {Component} from 'react'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport {HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport {LoginPage} from './components/Login/LoginPage'\r\nimport {connect, Provider} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {initializeApp} from './redux/app-reducer'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\nimport store, {AppStateType} from './redux/redux-store'\r\nimport {withSuspense} from './hoc/withSuspense'\r\nimport {UsersPage} from './components/Users/UsersContainer'\r\n\r\nimport {Layout, Menu} from 'antd'\r\nimport {LaptopOutlined, UserOutlined} from '@ant-design/icons'\r\nimport { Header } from './components/Header/Header'\r\n\r\nconst {SubMenu} = Menu\r\nconst {Content, Footer, Sider} = Layout\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Find new connections</Link></Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n\r\n                            <Switch>\r\n                                <Route exact path='/'\r\n                                       render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n                                <Route path='/dialogs'\r\n                                       render={() => <SuspendedDialogs/>}/>\r\n\r\n                                <Route path='/profile/:userId?'\r\n                                       render={() => <SuspendedProfile/>}/>\r\n\r\n                                <Route path='/developers'\r\n                                       render={() => <UsersPage pageTitle={'Find new connections'}/>}/>\r\n\r\n                                <Route path='/login'\r\n                                       render={() => <LoginPage/>}/>\r\n\r\n                                <Route path='*'\r\n                                       render={() => <div>404 PAGE NOT FOUND</div>}/>\r\n                            </Switch>\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Social Network ©2021</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\nconst SocNetApp: React.FC = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SocNetApp\r\n","import * as serviceWorker from './serviceWorker';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1rGP8\",\"error\":\"FormsControls_error__wSYja\",\"formSummaryError\":\"FormsControls_formSummaryError__Q9DAf\"};"],"sourceRoot":""}